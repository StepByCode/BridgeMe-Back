name: CD

on:
  workflow_dispatch: # これに変更

jobs:
  deploy:
    # needs: ci_test # これは削除
    runs-on: ubuntu-latest
    permissions:
      deployments: write # デプロイメントAPIに書き込む権限
    environment: production
    steps:
    - uses: actions/checkout@v4

    - name: Create Deployment
      uses: actions/github-script@v6
      id: create_deployment
      with:
        script: |
          const deployment = await github.rest.repos.createDeployment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: context.ref,
            environment: 'production',
            description: 'Deploying from GitHub Actions',
            auto_merge: false,
            required_contexts: [],
          });
          core.setOutput('deployment_id', deployment.data.id);

    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.EC2_PRIVATE_KEY }}

    - name: Transfer files to EC2
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        source: "."
        target: "/home/admin/BridgeMe-Back"
        strip_components: 1

    - name: Build and Run Docker Compose on EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        script: |
          cd /home/admin/BridgeMe-Back
          docker compose build
          docker compose up -d

    - name: Update Deployment Status (Success)
      if: success()
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: ${{steps.create_deployment.outputs.deployment_id}},
            state: 'success',
            environment: 'production',
            description: 'Deployment successful',
          });

    - name: Update Deployment Status (Failure)
      if: failure()
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: ${{steps.create_deployment.outputs.deployment_id}},
            state: 'failure',
            environment: 'production',
            description: 'Deployment failed',
          });
